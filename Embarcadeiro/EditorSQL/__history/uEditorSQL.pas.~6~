unit uEditorSQL;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Grids, Vcl.DBGrids,
  FireDAC.Comp.Client, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Stan.Param, FireDAC.Comp.DataSet, uDTMConexao,
  Vcl.Buttons, FireDAC.Phys.Intf, FireDAC.Stan.Async, Vcl.ExtCtrls, Vcl.ComCtrls;

type
  TfrmEditorSQL = class(TForm)
    mmSQL: TMemo;
    dbGridSQL: TDBGrid;
    dtSQL: TDataSource;
    QrySQL: TFDQuery;
    Panel1: TPanel;
    btnF9: TBitBtn;
    StatusBar: TStatusBar;
    procedure StatusBarDrawPanel(StatusBar: TStatusBar; Panel: TStatusPanel;
      const Rect: TRect);
    procedure btnF9Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
    procedure ExecuteSQL(const SQLText: string);
    procedure UpdateStatus(const Msg: string; const IsSuccess: Boolean);
  public
    { Public declarations }
  end;

var
  frmEditorSQL: TfrmEditorSQL;

implementation

{$R *.dfm}

procedure TfrmEditorSQL.btnF9Click(Sender: TObject);
begin
  // Chama o método para executar o SQL digitado no Memo
  ExecuteSQL(mmSQL.Lines.Text);
end;


procedure TfrmEditorSQL.ExecuteSQL(const SQLText: string);
begin
  try
    // Limpa o DBGrid antes de mostrar os novos resultados
    dbGridSQL.DataSource := nil;

    // Atribui o texto SQL do Memo ao TFDQuery
    QrySQL.SQL.Text := SQLText;

    // Verifica se é uma consulta de seleção (SELECT)
    if QrySQL.SQL.Text.Trim.StartsWith('SELECT', True) then
    begin
      QrySQL.Open;

      // Se não houver registros
      if QrySQL.IsEmpty then
      begin
        UpdateStatus('Consulta executada, mas sem resultados.', False);
        dbGridSQL.DataSource := nil;  // Remove o DataSource se não houver resultados
      end
      else
      begin
        dbGridSQL.DataSource := dtSQL; // Atribui o DataSource ao DBGrid
        UpdateStatus('Consulta executada com sucesso.', True);
      end;
    end
    else
    begin
      // Caso seja uma consulta de modificação (INSERT, UPDATE, DELETE)
      QrySQL.ExecSQL;
      UpdateStatus('Comando executado com sucesso.', True);
      dbGridSQL.DataSource := nil;  // Remove o DataSource após executar a modificação
    end;

  except
    on E: Exception do
    begin
      // Exibe mensagem de erro
      ShowMessage('Erro ao executar SQL: ' + E.Message);
      UpdateStatus('Erro na execução do SQL: ' + E.Message, False);
    end;
  end;
end;



procedure TfrmEditorSQL.FormCreate(Sender: TObject);
begin
dtSQL.DataSet := QrySQL;
end;

procedure TfrmEditorSQL.StatusBarDrawPanel(StatusBar: TStatusBar; Panel: TStatusPanel; const Rect: TRect);
begin
  // Modifica a cor do painel de status utilizando o Canvas
  if Panel.Text = 'Erro' then
    StatusBar.Canvas.Brush.Color := clRed // Cor de fundo vermelha para erro
  else
    StatusBar.Canvas.Brush.Color := clGreen; // Cor de fundo verde para sucesso

  StatusBar.Canvas.FillRect(Rect); // Preenche o painel com a cor de fundo
  StatusBar.Canvas.TextOut(Rect.Left + 2, Rect.Top + 2, Panel.Text); // Desenha o texto do painel
end;


procedure TfrmEditorSQL.UpdateStatus(const Msg: string; const IsSuccess: Boolean);
begin
  // Atualiza a barra de status com a mensagem
  StatusBar.Panels[0].Text := Msg;

  // Determina se o status é de sucesso ou erro
  if IsSuccess then
    StatusBar.Panels[0].Text := 'Sucesso'
  else
    StatusBar.Panels[0].Text := 'Erro';

  // Redesenha o StatusBar para aplicar as mudanças
  StatusBar.Repaint;
end;





end.

